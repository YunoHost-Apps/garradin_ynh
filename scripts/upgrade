#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=3

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path) || ynh_die --message="This path already contains a folder"
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
secret_key=$(ynh_string_random --length=50)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=30

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
  # Restore it if the upgrade fails
  ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
  final_path=/var/www/$app
  ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
  ynh_legacy_permissions_delete_all

  ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# Backup Data
#=================================================
ynh_script_progression --message="Backing up the data before upgrading (may take a while)..." --weight=30

bdd=$final_path/association.sqlite
squelettes=$final_path/www/squelettes
data=$final_path/data
skel_dist=$final_path/www/skel-dist

if  [ -d "$squelettes" ]; then
  cp -a "$squelettes" /tmp/squelettes
fi

if [ -e "$bdd" ]; then
  cp -a "$bdd" /tmp/association.sqlite
fi

if  [ -d "$data" ]; then
  cp -a "$data" /tmp/data
fi

if [ -d "$skel_dist" ]; then
  cp -a "$skel_dist" /tmp/skel-dist
fi

#=================================================
# UPGRADE TO 0.9.8 if necessary
#=================================================

if ynh_compare_current_package_version --comparison lt --version 0.9.8.1~ynh1
then
  ynh_script_progression --message="Upgrading to 0.9.8" --weight=5
    # Download, check integrity, uncompress and patch the source from 0.9.8.src
  ynh_setup_source --keep="config.local.php" --dest_dir="$final_path" --source_id="0.9.8"
  # Set permissions on app files
  ynh_system_user_create --username=$app
  ynh_add_nginx_config
  ynh_install_app_dependencies "$extra_php_dependencies"
  ynh_add_fpm_config
  phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
  ynh_script_progression --message="restore data..." --weight=10

  backup_bdd=/tmp/association.sqlite
  backup_squelettes=/tmp/squelettes

  if  [ -d "$backup_squelettes" ]
  then
    cp -a "$backup_squelettes" $final_path/www/squelettes
  fi

  if [ -e "$backup_bdd" ]
  then
    cp -a "$backup_bdd" $final_path/association.sqlite
  fi

  chown -R $app:$app $final_path
  chmod 755 $final_path

  # Temporarily enable visitors for curl if needed
  visitors_enabled=$(ynh_permission_has_user "main" "visitors" && echo yes || echo no)
  if [[ $visitors_enabled == "no" ]]; then
    ynh_permission_update --permission "main" --add "visitors"
  fi

  # Finalize the upgrade
  ynh_local_curl "/index.php"
  sleep 5
  ynh_local_curl "/index.php"

  if [[ $visitors_enabled == "no" ]]; then
    ynh_permission_update --permission "main" --remove "visitors"
  fi
fi
#=================================================
# UPGRADE TO 1.1.0 if necessary
#=================================================

if ynh_compare_current_package_version --comparison lt --version 1.1.0~ynh1
then
  ynh_script_progression --message="Upgrading to 1.1.0" --weight=5
  # Download, check integrity, uncompress and patch the source from 0.9.8.src
  ynh_setup_source --keep="config.local.php" --dest_dir="$final_path" --source_id="1.1.0"
  # Set permissions on app files
  ynh_system_user_create --username=$app
  ynh_add_nginx_config
  ynh_install_app_dependencies "$extra_php_dependencies"
  ynh_add_fpm_config
  phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
  ynh_script_progression --message="restore data..." --weight=10

  backup_bdd=/tmp/association.sqlite
  backup_squelettes=/tmp/squelettes

  if  [ -d "$backup_squelettes" ]
  then
    cp -a "$backup_squelettes" $final_path/www/squelettes
  fi

  if [ -e "$backup_bdd" ]
  then
    cp -a "$backup_bdd" $final_path/association.sqlite
  fi

  chown -R $app:$app $final_path
  chmod 755 $final_path

  # Temporarily enable visitors for curl if needed
  visitors_enabled=$(ynh_permission_has_user "main" "visitors" && echo yes || echo no)
  if [[ $visitors_enabled == "no" ]]; then
    ynh_permission_update --permission "main" --add "visitors"
  fi

  # Finalize the upgrade
  ynh_local_curl "/index.php"
  sleep 5
  ynh_local_curl "/index.php"

  if [[ $visitors_enabled == "no" ]]; then
    ynh_permission_update --permission "main" --remove "visitors"
  fi
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
  ynh_script_progression --message="Upgrading source files..." --weight=5

  # Download, check integrity, uncompress and patch the source from app.src
  ynh_setup_source --keep="config.local.user.php" --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# Create a dedicated PHP-FPM config
ynh_install_app_dependencies "$extra_php_dependencies"
ynh_add_fpm_config

#=======================================================
# backup bdd, squelettes directory and config.local.php
#=======================================================
ynh_script_progression --message="restore data..." --weight=10

backup_bdd=/tmp/association.sqlite
backup_squelettes=/tmp/squelettes
backup_data=/tmp/data
backup_skel_dist=/tmp/skel-dist

if  [ -d "$backup_squelettes" ]
then
  cp -a "$backup_squelettes" $final_path/www/squelettes
  ynh_secure_remove  $backup_squelettes
fi

if [ -e "$backup_bdd" ]
then
  cp -a "$backup_bdd" $final_path/association.sqlite
  ynh_secure_remove $backup_bdd
fi

if  [ -d "$backup_data" ]
then
  cp -a "$backup_data" $final_path/data
  ynh_secure_remove  $backup_data
fi

if  [ -d "$backup_skel_dist" ]
then
  cp -a "$backup_skel_dist" $final_path/www/skel-dist
  ynh_secure_remove  $backup_skel_dist
fi

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=5

if ynh_compare_current_package_version --comparison lt --version 1.1.15~ynh1; then
  ynh_add_config --template="config.local.user.php" --destination="$final_path/config.local.user.php"
fi

ynh_add_config --template="config.local.php" --destination="$final_path/config.local.php"
ynh_add_config --template="config.local.yunohost.php" --destination="$final_path/config.local.yunohost.php"
# NOTE: Don't overwrite config.local.user.php

# Permissions on files and directories
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"
find "$final_path" -type d -exec chmod 550 {} +
find "$final_path" -type f -exec chmod 440 {} +
find "$final_path/data" -type d -exec chmod 770 {} +
find "$final_path/data" -type f -exec chmod 660 {} +
chmod 440 "$final_path/config.local.php"
chmod 440 "$final_path/config.local.yunohost.php"
chmod 660 "$final_path/config.local.user.php"

#=================================================
# GENERIC FINALIZATION
#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# Finalise Upgrade
#=================================================
ynh_script_progression --message="Finalise upgrade" --weight=1

ynh_local_curl "/admin/index.php"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last