#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path) || ynh_die "This path already contains a folder"
#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
  final_path=/var/www/$app
  ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

### If nobody installed your app before 3.7,
### then you may safely remove these lines

# Cleaning legacy permissions
# is_public=$(ynh_app_setting_get --app=$app --key=is_public)

if [ -n "$is_public" ]; then
  # Remove unprotected_uris
  ynh_app_setting_delete --app=$app --key=unprotected_uris
  
  #Removing skipped/unprotected_uris under certain conditions, remove the visitors group added during the migration process of 3.7
  #Remove skipped_uris. If the app was public, add visitors again to the main permission
  if ynh_permission_has_user --permission=main --user=visitors
  then
    ynh_app_setting_delete --app=$app --key=skipped_uris
    ynh_permission_update --permission "main" --add "visitors"
  else
    ynh_app_setting_delete --app=$app --key=skipped_uris
  fi
  ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# Backup Data
#=================================================
ynh_script_progression --message="Backing up the data before upgrading (may take a while)..." --time --weight=1

bdd=$final_path/association.sqlite
squelettes=$final_path/www/squelettes

if  [ -d "$squelettes" ]; then
  cp -ar $squelettes /tmp/squelettes
fi

if [ -e "$bdd" ]; then
  cp -a $bdd /tmp/association.sqlite
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..." --time --weight=1

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --time --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --time --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app


#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --time --weight=1

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# Change options in file config.dist.php
# and copy in local.dist.php
#=================================================
ynh_script_progression --message="final configuration needed..." --time --weight=1

key=$(ynh_string_random --length=50)
cp -a $final_path/config.dist.php $final_path/config.local.php
ynh_replace_string --match_string="const SECRET_KEY = '3xUhIgGwuovRKOjVsVPQ5yUMfXUSIOX2GKzcebsz5OINrYC50r';" --replace_string="const SECRET_KEY = '$key';" --target_file="$final_path/config.local.php"
if [ "$path_url" == "/" ]
then
  ynh_replace_string --match_string="//const WWW_URI = '/asso/';" --replace_string="const WWW_URI = '$path_url';" --target_file="$final_path/config.local.php"
else
  ynh_replace_string --match_string="//const WWW_URI = '/asso/';" --replace_string="const WWW_URI = '$path_url/';" --target_file="$final_path/config.local.php"
fi
#=======================================================
# backup bdd, squelettes directory and config.local.php
#=======================================================
ynh_script_progression --message="restore data..." --time --weight=1

backup_bdd=/tmp/association.sqlite
backup_squelettes=/tmp/squelettes

if 	[ -d "$backup_squelettes" ]
then
  cp -ar $backup_squelettes $final_path/www/squelettes
fi

if [ -e "$backup_bdd" ]
then
	cp -a $backup_bdd $final_path/association.sqlite
fi

#=================================================
# Files owned by user app
#=================================================

# Set permissions on app files
chown $app:$app $final_path -R
chmod 755 $final_path -R

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading permissions configuration..." --time --weight=1

# Create the visitors permission if needed
if ! ynh_permission_exists --permission "visitors"; then
  ynh_permission_create --permission "visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Upgrade of $app completed" --time --last